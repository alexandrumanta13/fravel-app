import { 
  Component, 
  Inject, 
  OnInit, 
  PLATFORM_ID, 
  effect, 
  signal, 
  computed, 
  OnDestroy 
} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { Subject, takeUntil } from 'rxjs';\n\nimport { SharedService } from 'src/app/shared/shared.service';\nimport { Airport, FlightSearchObj } from 'src/app/shared/types';\nimport { \n  IBagsOptions, \n  IBagsExtendedOptions \n} from '../select-persons/select-persons.type';\nimport { TravelFusionService } from 'src/app/core/api/travel-fusion/travel-fusion.service';\nimport { DateUtilsFacade } from 'src/app/core/utils/date-utils.facade';\n\nexport interface FlightSearchSummary {\n  departure: Airport | null;\n  destination: Airport | null;\n  departureDate: Date | null;\n  returnDate: Date | null;\n  isOneWay: boolean;\n  passengers: {\n    adults: number;\n    children: number;\n    infants: number;\n    total: number;\n  };\n  baggage: {\n    handBags: number;\n    holdBags: number;\n  };\n}\n\nexport interface SearchValidation {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n@Component({\n  standalone: true,\n  selector: 'app-search-flights-refactored',\n  templateUrl: './search-flights-refactored.component.html',\n  styleUrls: ['./search-flights-refactored.component.scss'],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatSnackBarModule,\n  ],\n})\nexport class SearchFlightsRefactoredComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  // ========================\n  // REACTIVE STATE\n  // ========================\n  \n  // Search state\n  isSearching = signal(false);\n  searchError = signal<string | null>(null);\n  lastSearchTime = signal<Date | null>(null);\n  \n  // Flight search data (reactive)\n  flightSearch = signal<FlightSearchObj>({} as FlightSearchObj);\n  \n  // ========================\n  // COMPUTED PROPERTIES\n  // ========================\n  \n  // Processed search summary\n  searchSummary = computed<FlightSearchSummary>(() => {\n    const search = this.flightSearch();\n    \n    return {\n      departure: this.isValidAirport(search.departureCity) ? search.departureCity : null,\n      destination: this.isValidAirport(search.destinationCity) ? search.destinationCity : null,\n      departureDate: search.dateFrom ? new Date(search.dateFrom) : null,\n      returnDate: search.dateTo ? new Date(search.dateTo) : null,\n      isOneWay: search.isFlightTypeOneWay || false,\n      passengers: {\n        adults: search.infoSerializedOptionsPersons?.selectedAdults || 0,\n        children: search.infoSerializedOptionsPersons?.selectedChildren || 0,\n        infants: search.infoSerializedOptionsPersons?.selectedInfants || 0,\n        total: (search.infoSerializedOptionsPersons?.selectedAdults || 0) + \n               (search.infoSerializedOptionsPersons?.selectedChildren || 0) + \n               (search.infoSerializedOptionsPersons?.selectedInfants || 0),\n      },\n      baggage: {\n        handBags: search.infoSerializedOptionsBags?.handBagsSelected || 0,\n        holdBags: search.infoSerializedOptionsBags?.holdBagsSelected || 0,\n      },\n    };\n  });\n  \n  // Search validation\n  validation = computed<SearchValidation>(() => {\n    const summary = this.searchSummary();\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    \n    // Required fields validation\n    if (!summary.departure) {\n      errors.push('Selectează aeroportul de plecare');\n    }\n    \n    if (!summary.destination) {\n      errors.push('Selectează destinația');\n    }\n    \n    if (!summary.departureDate) {\n      errors.push('Selectează data de plecare');\n    }\n    \n    if (!summary.isOneWay && !summary.returnDate) {\n      errors.push('Selectează data de întoarcere pentru dus-întors');\n    }\n    \n    if (summary.passengers.total === 0) {\n      errors.push('Adaugă cel puțin un pasager');\n    }\n    \n    // Business rules validation\n    if (summary.departure && summary.destination && \n        summary.departure.id === summary.destination.id) {\n      errors.push('Aeroportul de plecare nu poate fi același cu destinația');\n    }\n    \n    // Date validation\n    if (summary.departureDate && summary.returnDate) {\n      const validation = this.dateUtils.validateBookingDates(\n        summary.departureDate, \n        summary.returnDate\n      );\n      errors.push(...validation.errors);\n    }\n    \n    // Warnings\n    if (summary.passengers.infants > 0 && summary.baggage.handBags === 0) {\n      warnings.push('Consideră adăugarea bagajului de mână pentru călătoria cu infants');\n    }\n    \n    if (summary.passengers.total > 6) {\n      warnings.push('Grupurile mari pot avea opțiuni limitate de zboruri');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  });\n  \n  // Display helpers\n  canSearch = computed(() => this.validation().isValid && !this.isSearching());\n  \n  tripSummaryText = computed(() => {\n    const summary = this.searchSummary();\n    if (!summary.departure || !summary.destination) return '';\n    \n    const route = `${summary.departure.city.name} → ${summary.destination.city.name}`;\n    const type = summary.isOneWay ? 'Doar dus' : 'Dus-întors';\n    return `${route} • ${type}`;\n  });\n  \n  datesSummaryText = computed(() => {\n    const summary = this.searchSummary();\n    if (!summary.departureDate) return '';\n    \n    const depDate = this.dateUtils.formatForDisplay(summary.departureDate);\n    \n    if (summary.isOneWay || !summary.returnDate) {\n      return depDate;\n    }\n    \n    const retDate = this.dateUtils.formatForDisplay(summary.returnDate);\n    return `${depDate} - ${retDate}`;\n  });\n  \n  passengersSummaryText = computed(() => {\n    const { passengers } = this.searchSummary();\n    const parts: string[] = [];\n    \n    if (passengers.adults > 0) {\n      parts.push(`${passengers.adults} ${passengers.adults === 1 ? 'adult' : 'adulți'}`);\n    }\n    if (passengers.children > 0) {\n      parts.push(`${passengers.children} ${passengers.children === 1 ? 'copil' : 'copii'}`);\n    }\n    if (passengers.infants > 0) {\n      parts.push(`${passengers.infants} ${passengers.infants === 1 ? 'infant' : 'infanți'}`);\n    }\n    \n    return parts.join(', ');\n  });\n  \n  baggageSummaryText = computed(() => {\n    const { baggage } = this.searchSummary();\n    const parts: string[] = [];\n    \n    if (baggage.handBags > 0) {\n      parts.push(`${baggage.handBags} bagaj${baggage.handBags > 1 ? 'e' : ''} de mână`);\n    }\n    if (baggage.holdBags > 0) {\n      parts.push(`${baggage.holdBags} bagaj${baggage.holdBags > 1 ? 'e' : ''} de cală`);\n    }\n    \n    return parts.length > 0 ? parts.join(', ') : 'Fără bagaje';\n  });\n\n  constructor(\n    private sharedService: SharedService,\n    private travelFusionService: TravelFusionService,\n    private dateUtils: DateUtilsFacade,\n    private router: Router,\n    private snackBar: MatSnackBar,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    if (isPlatformBrowser(this.platformId)) {\n      // Sync with SharedService state\n      effect(() => {\n        this.flightSearch.set(this.sharedService.flightSearch());\n      });\n    }\n  }\n\n  ngOnInit(): void {\n    // Clear any previous errors on init\n    this.searchError.set(null);\n  }\n  \n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  // ========================\n  // SEARCH LOGIC\n  // ========================\n  \n  async searchFlights(): Promise<void> {\n    const validation = this.validation();\n    \n    // Show validation errors\n    if (!validation.isValid) {\n      this.showValidationErrors(validation.errors);\n      return;\n    }\n    \n    // Show warnings if any\n    if (validation.warnings.length > 0) {\n      this.showWarnings(validation.warnings);\n    }\n    \n    this.isSearching.set(true);\n    this.searchError.set(null);\n    \n    try {\n      // Track search analytics\n      this.trackSearchEvent();\n      \n      // Perform the actual search\n      await this.travelFusionService.searchFlights();\n      \n      // Update last search time\n      this.lastSearchTime.set(new Date());\n      \n      // Navigate to results\n      this.sharedService.setStepFn(4);\n      \n      // Show success feedback\n      this.showSuccessMessage();\n      \n    } catch (error) {\n      console.error('Search failed:', error);\n      \n      const errorMessage = this.getErrorMessage(error);\n      this.searchError.set(errorMessage);\n      \n      this.showErrorMessage(errorMessage);\n    } finally {\n      this.isSearching.set(false);\n    }\n  }\n  \n  // Quick actions\n  editDeparture(): void {\n    this.sharedService.updateUiStatesObjFn([{ toggleDeparture: true }]);\n  }\n  \n  editDestination(): void {\n    this.sharedService.updateUiStatesObjFn([{ toggleDestination: true }]);\n  }\n  \n  editDates(): void {\n    this.sharedService.updateUiStatesObjFn([{ toggleSelectDate: true }]);\n  }\n  \n  editPassengers(): void {\n    this.sharedService.updateUiStatesObjFn([{ toggleSelectPersons: true }]);\n  }\n  \n  // ========================\n  // HELPER METHODS\n  // ========================\n  \n  private isValidAirport(airport: any): airport is Airport {\n    return airport && \n           typeof airport === 'object' && \n           airport.id && \n           airport.city && \n           airport.city.name;\n  }\n  \n  private trackSearchEvent(): void {\n    const summary = this.searchSummary();\n    \n    // Analytics tracking\n    if (typeof gtag !== 'undefined') {\n      gtag('event', 'flight_search', {\n        'departure_city': summary.departure?.city.name,\n        'destination_city': summary.destination?.city.name,\n        'trip_type': summary.isOneWay ? 'one_way' : 'round_trip',\n        'passengers': summary.passengers.total,\n        'advance_booking_days': summary.departureDate ? \n          this.dateUtils.differenceInDays(new Date(), summary.departureDate) : 0\n      });\n    }\n  }\n  \n  private getErrorMessage(error: any): string {\n    if (error?.message) {\n      return error.message;\n    }\n    \n    if (error?.status === 429) {\n      return 'Prea multe căutări. Încearcă din nou în câteva minute.';\n    }\n    \n    if (error?.status >= 500) {\n      return 'Probleme cu serverul. Te rugăm să încerci mai târziu.';\n    }\n    \n    if (error?.status === 0) {\n      return 'Probleme de conexiune. Verifică internetul și încearcă din nou.';\n    }\n    \n    return 'A apărut o eroare neașteptată. Te rugăm să încerci din nou.';\n  }\n  \n  // ========================\n  // UI FEEDBACK\n  // ========================\n  \n  private showValidationErrors(errors: string[]): void {\n    const message = errors.join('\\n');\n    this.snackBar.open(message, 'Înțeles', {\n      duration: 5000,\n      panelClass: ['error-snackbar'],\n    });\n  }\n  \n  private showWarnings(warnings: string[]): void {\n    const message = warnings.join('\\n');\n    this.snackBar.open(message, 'OK', {\n      duration: 4000,\n      panelClass: ['warning-snackbar'],\n    });\n  }\n  \n  private showErrorMessage(message: string): void {\n    this.snackBar.open(message, 'Încearcă din nou', {\n      duration: 6000,\n      panelClass: ['error-snackbar'],\n    }).onAction().pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.searchFlights();\n    });\n  }\n  \n  private showSuccessMessage(): void {\n    this.snackBar.open('Căutăm zborurile pentru tine...', '', {\n      duration: 2000,\n      panelClass: ['success-snackbar'],\n    });\n  }\n  \n  // ========================\n  // KEYBOARD SHORTCUTS\n  // ========================\n  \n  onKeyDown(event: KeyboardEvent): void {\n    // Enter key to search\n    if (event.key === 'Enter' && this.canSearch()) {\n      event.preventDefault();\n      this.searchFlights();\n    }\n    \n    // Escape key to clear errors\n    if (event.key === 'Escape' && this.searchError()) {\n      this.searchError.set(null);\n    }\n  }\n}"