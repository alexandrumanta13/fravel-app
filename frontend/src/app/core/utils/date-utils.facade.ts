import { Injectable } from '@angular/core';\nimport { ConverDateUtils } from './utilities/convert-date-utils.service';\nimport { ModernDateService } from './modern-date.service';\n\n/**\n * Facade service pentru tranziția graduală de la ConverDateUtils la ModernDateService\n * Oferă o interfață unificată pentru operațiile cu date în aplicație\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DateUtilsFacade {\n  constructor(\n    private legacyService: ConverDateUtils,\n    private modernService: ModernDateService\n  ) {}\n\n  // ========================\n  // METODE MODERNE (RECOMANDATE)\n  // ========================\n  \n  /**\n   * Formatează o dată pentru afișare (folosește serviciul modern)\n   */\n  formatForDisplay(date: Date | number): string {\n    return this.modernService.formatForDisplay(date);\n  }\n  \n  /**\n   * Formatează o dată pentru API (folosește serviciul modern)\n   */\n  formatForAPI(date: Date | number): string {\n    return this.modernService.formatForAPI(date);\n  }\n  \n  /**\n   * Adaugă zile la o dată (folosește serviciul modern)\n   */\n  addDays(date: Date | number, days: number): Date {\n    return this.modernService.addDays(date, days);\n  }\n  \n  /**\n   * Calculează diferența în zile (folosește serviciul modern)\n   */\n  differenceInDays(date1: Date | number, date2: Date | number): number {\n    return this.modernService.differenceInDays(date1, date2);\n  }\n  \n  /**\n   * Setează ora la începutul zilei (folosește serviciul modern)\n   */\n  startOfDay(date: Date | number): Date {\n    return this.modernService.startOfDay(date);\n  }\n  \n  /**\n   * Convertește secunde în format ore:minute (folosește serviciul modern)\n   */\n  convertSecondsToHourMinute(seconds: number): string {\n    const result = this.modernService.convertSecondsToHourMinute(seconds);\n    return result.formatted;\n  }\n\n  // ========================\n  // COMPATIBILITATE LEGACY\n  // ========================\n  \n  /**\n   * @deprecated Folosește modernService.formatForAPI() în schimb\n   */\n  formatDatesForKiwiSearch(date: number): string {\n    console.warn('formatDatesForKiwiSearch este deprecated, folosește formatForAPI');\n    return this.legacyService.formatDatesForKiwiSearch(date);\n  }\n  \n  /**\n   * @deprecated Folosește modernService.startOfDay().getTime() în schimb\n   */\n  setHours(date: Date): number {\n    console.warn('setHours este deprecated, folosește startOfDay().getTime()');\n    return this.legacyService.setHours(date);\n  }\n  \n  /**\n   * @deprecated Folosește modernService.startOfDay() în schimb\n   */\n  convertDateSameHours(date: Date): Date {\n    console.warn('convertDateSameHours este deprecated, folosește startOfDay()');\n    return this.legacyService.convertDateSameHours(date);\n  }\n  \n  /**\n   * @deprecated Folosește modernService.differenceInDays() în schimb\n   */\n  differenceInDaysLegacy(date1: number, date2: number): number {\n    console.warn('Folosește differenceInDays cu Date objects în schimb');\n    return this.legacyService.differenceInDays(date1, date2);\n  }\n\n  // ========================\n  // METODE SPECIFICE FLIGHT BOOKING\n  // ========================\n  \n  /**\n   * Formatează timpul pentru afișarea zborurilor\n   */\n  formatFlightTime(isoString: string): string {\n    try {\n      const date = new Date(isoString);\n      return this.modernService.formatTime(date);\n    } catch {\n      // Fallback la metoda legacy\n      return this.legacyService.kiwiConvertISOTimeStringToHours(isoString);\n    }\n  }\n  \n  /**\n   * Calculează timpul de așteptare între zboruri\n   */\n  calculateLayoverTime(arrival: string, departure: string): string {\n    try {\n      const result = this.modernService.calculateLayoverTime(arrival, departure);\n      return result.formatted;\n    } catch {\n      // Fallback la metoda legacy\n      return this.legacyService.kiwiGetWaitingTime(arrival, departure);\n    }\n  }\n  \n  /**\n   * Validează un range de date pentru booking\n   */\n  validateBookingDates(departure: Date, returnDate?: Date): {\n    isValid: boolean;\n    errors: string[];\n  } {\n    return this.modernService.validateDateRange(departure, returnDate);\n  }\n\n  // ========================\n  // FACTORY METHODS\n  // ========================\n  \n  /**\n   * Creează o dată pentru mâine\n   */\n  getTomorrowDate(): Date {\n    return this.modernService.addDays(new Date(), 1);\n  }\n  \n  /**\n   * Creează o dată pentru începutul săptămânii următoare\n   */\n  getNextWeekStart(): Date {\n    const today = new Date();\n    const daysUntilMonday = (8 - today.getDay()) % 7;\n    return this.modernService.addDays(today, daysUntilMonday === 0 ? 7 : daysUntilMonday);\n  }\n  \n  /**\n   * Creează un range de date default pentru căutare zboruri\n   */\n  getDefaultFlightDateRange(): { departure: Date; return: Date } {\n    const departure = this.getTomorrowDate();\n    const returnDate = this.modernService.addDays(departure, 7);\n    \n    return { departure, return: returnDate };\n  }\n}